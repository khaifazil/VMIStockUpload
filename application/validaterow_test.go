package main

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCSVRow_validateRow(t *testing.T) {
	type fields struct {
		Vendor                  string
		MaterialCode            string
		MaterialDesc            string
		ContractNo              string
		PONumber                string
		POLineItem              string
		LIName                  LIName
		LIDate                  string
		BatchNo                 string
		BatchDueDate            string
		DrumSize                int
		TotalNoOfDrums          int
		TotalQty                int
		AvailableDrumNos        []int
		AvailableFullDrums      int
		FullDrumTotalQuantity   int
		BufferDrumNo            []int
		BufferNoOfDrums         int
		BufferQuantity          int
		SampleDrum              string
		SampleDrumNo            []int
		SampleLength            []float64
		NoOfShortLengthDrums    int
		ShortLengthTotalQty     float64
		ApprovedDrumNumbers     []int
		BatchTestReportDate     string
		Remarks                 string
		BatchTestReportFileName string
	}
	type args struct {
		rowIndex int
	}

	tests := []struct {
		name   string
		fields fields
		args   args
		want   []Error
	}{
		{
			name: "Valid row",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{},
		},
		{
			name: "Invalid Vendor",
			fields: fields{
				Vendor:                  "",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("vendor is required")}},
		},
		{
			name: "Invalid Material Code",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("material code is required")}},
		},
		{
			name: "Invalid Drum Size",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "101642",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                20,
				TotalNoOfDrums:          6,
				TotalQty:                120,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   60,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          40,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{2.5},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     17.5,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("invalid drum size")}},
		},
		{
			name: "Invalid Date Format",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "101642",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "2022-01-01", // Invalid date format
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("invalid LI date format")}},
		},
		{
			name: "Invalid Batch Number Format",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "101642",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1-1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("invalid batch no. format")}},
		},
		{
			name: "Invalid LI Name",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: ""},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("LI No. is required")}},
		},
		{
			name: "Invalid Batch Due Date Format",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "2022-01-01",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("invalid batch due date format")}},
		},
		{
			name: "Invalid Total Number of Drums",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          0,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("total no of drums must be greater than 0")}, {RowNo: 2, Err: fmt.Errorf("total no of drums does not match with no of available drums, no of buffer drums, no of short drums")}},
		},
		{
			name: "Invalid Material Description",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "",
				ContractNo:              "Contract1",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("material description is required")}},
		},
		{
			name: "Invalid Contract Number",
			fields: fields{
				Vendor:                  "Vendor1",
				MaterialCode:            "Material1",
				MaterialDesc:            "Description1",
				ContractNo:              "",
				PONumber:                "PONumber1",
				POLineItem:              "POLineItem1",
				LIName:                  LIName{LICode: "LICode1", LINumber: "LINumber1"},
				LIDate:                  "01-01-2022",
				BatchNo:                 "1/1",
				BatchDueDate:            "01-01-2022",
				DrumSize:                250,
				TotalNoOfDrums:          6,
				TotalQty:                1500,
				AvailableDrumNos:        []int{1, 2, 3},
				AvailableFullDrums:      3,
				FullDrumTotalQuantity:   750,
				BufferDrumNo:            []int{4, 5},
				BufferNoOfDrums:         2,
				BufferQuantity:          500,
				SampleDrum:              "Yes",
				SampleDrumNo:            []int{6},
				SampleLength:            []float64{125.0},
				NoOfShortLengthDrums:    1,
				ShortLengthTotalQty:     125.0,
				ApprovedDrumNumbers:     []int{1, 2, 3, 4, 5, 6},
				BatchTestReportDate:     "01-01-2022",
				Remarks:                 "Remarks1",
				BatchTestReportFileName: "FileName1",
			},
			args: args{
				rowIndex: 1,
			},
			want: []Error{{RowNo: 2, Err: fmt.Errorf("contract no. is required")}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			row := &CSVRow{
				Vendor:                  tt.fields.Vendor,
				MaterialCode:            tt.fields.MaterialCode,
				MaterialDesc:            tt.fields.MaterialDesc,
				ContractNo:              tt.fields.ContractNo,
				PONumber:                tt.fields.PONumber,
				POLineItem:              tt.fields.POLineItem,
				LIName:                  tt.fields.LIName,
				LIDate:                  tt.fields.LIDate,
				BatchNo:                 tt.fields.BatchNo,
				BatchDueDate:            tt.fields.BatchDueDate,
				DrumSize:                tt.fields.DrumSize,
				TotalNoOfDrums:          tt.fields.TotalNoOfDrums,
				TotalQty:                tt.fields.TotalQty,
				AvailableDrumNos:        tt.fields.AvailableDrumNos,
				AvailableFullDrums:      tt.fields.AvailableFullDrums,
				FullDrumTotalQuantity:   tt.fields.FullDrumTotalQuantity,
				BufferDrumNo:            tt.fields.BufferDrumNo,
				BufferNoOfDrums:         tt.fields.BufferNoOfDrums,
				BufferQuantity:          tt.fields.BufferQuantity,
				SampleDrum:              tt.fields.SampleDrum,
				SampleDrumNo:            tt.fields.SampleDrumNo,
				SampleLength:            tt.fields.SampleLength,
				NoOfShortLengthDrums:    tt.fields.NoOfShortLengthDrums,
				ShortLengthTotalQty:     tt.fields.ShortLengthTotalQty,
				ApprovedDrumNumbers:     tt.fields.ApprovedDrumNumbers,
				BatchTestReportDate:     tt.fields.BatchTestReportDate,
				Remarks:                 tt.fields.Remarks,
				BatchTestReportFileName: tt.fields.BatchTestReportFileName,
			}
			if got := row.validateRow(1); !assert.Equal(t, tt.want, got) {
				t.Errorf("CSVRow.validateRow() = %v, want %v", got, tt.want)
			}
		})
	}
}
